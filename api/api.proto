// api.proto
// Fully specifies the client-server API endpoints.

syntax = "proto3";

package game.api.api;
option go_package = "game.api.api";
option csharp_namespace = "DF.Game.API.API";

import "api/constants.proto";
import "api/data.proto";

// DownFlux surfaces client-server API endpoints to play the game.
service DownFlux {

  // AddClient instructs the server to create a new client object, and
  // represents a new player joining the game.
  rpc AddClient(AddClientRequest) returns (AddClientResponse) {}

  rpc Attack(AttackRequest) returns (AttackResponse) {};

  // Move represents a player's intent to move an entity to the specified
  // target location.
  rpc Move(MoveRequest) returns (MoveResponse) {
    option idempotency_level = IDEMPOTENT;
  };

  // StreamData is a persistent client-server connection communicating the
  // game state. See https://docs.downflux.com/design/network.html for more
  // details on the specific format and intent of the messages.
  rpc StreamData(StreamDataRequest) returns (stream StreamDataResponse) {
    option idempotency_level = IDEMPOTENT;
  }

  // GetStatus returns the internal game server status. This is useful for the
  // client to know when the server has formally started processing ticks.
  rpc GetStatus(GetStatusRequest) returns (GetStatusResponse) {
    option idempotency_level = IDEMPOTENT;
  }
}

message GetStatusRequest {}

message GetStatusResponse {
  game.api.data.ServerStatus status = 1;
}

message AttackRequest {
  double tick = 1;

  // TODO(minkezhang): Remove after adding authentication.
  string client_id = 2;

  repeated string entity_ids = 3;
  string target_entity_id = 4;
}

message AttackResponse {}

message MoveRequest {
  double tick = 1;

  // TODO(minkezhang): Remove after adding authentication.
  string client_id = 2;

  repeated string entity_ids = 3;
  game.api.data.Position destination = 4;
  game.api.constants.MoveType move_type = 5;
}

message MoveResponse {}

message StreamDataRequest {
  double tick = 1;

  // TODO(minkezhang): Remove after adding authentication.
  string client_id = 2;
}

message StreamDataResponse {
  double tick = 1;
  game.api.data.GameState state = 2;
}

// TODO(minkezhang): Add team.
message AddClientRequest {}
message AddClientResponse {
  double tick = 1;

  game.api.data.ClientID client_id = 2;
}
